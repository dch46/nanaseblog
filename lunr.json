[
    {
        "uri": "/posts/Django开发项目",
        "title": "Django开发项目",
        "content": "## 使用Django开发商业项目\n\n> 说明：本文的部分插图来自于《Python项目开发实战》和《精通Django》，这两本书中都包含了对Django框架精彩的讲解，有兴趣的读者可以自行购买阅读。\n\n### Web应用\n\n问题1：描述一个Web应用的工作流程。\n\n问题2：描述项目的物理架构。负载均",
        "tags": [
            "Django"
        ]
    },
    {
        "uri": "/posts/Docker容器详解",
        "title": "Docker容器详解",
        "content": "## Docker容器详解\n\nDocker是基于Go语言开发的开源应用容器引擎，遵从Apache Licence 2.0协议，可以让开发者打包应用以及应用的依赖包到一个可移植的容器中，然后发布到各种发行版本的Linux系统上。\n\n### Docker简介\n\n软件开发中最为麻烦的事情可能就是配置环境了",
        "tags": [
            "Docker"
        ]
    },
    {
        "uri": "/posts/GolangGo命令行教程",
        "title": "Golang之命令行教程",
        "content": "Go是由Robert Griesemer，Rob Pike和Ken Thompson在Google设计的一种静态类型的编译型编程语言。Go在语法上类似于C，但是具有内存安全性，垃圾回收，结构化类型和CSP样式的并发性。由于其域名golang.org，该语言通常称为“ Golang”，但专有名称是Go。",
        "tags": [
            "golang",
            "command"
        ]
    },
    {
        "uri": "/posts/Hexo优化之使用GooglePrettify高亮代码",
        "title": "Hexo优化之使用GooglePrettify高亮代码",
        "content": "Hexo自带代码高亮的功能可用性不高，尝试使用prettify对代码进行高亮显示。",
        "tags": [
            "Hexo"
        ]
    },
    {
        "uri": "/posts/Hugo搭建博客",
        "title": "Hugo搭建博客",
        "content": "Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。对比Hexo，Hugo仅需一个二进制文件（hugo.exe）即可实现网站生成的生成。",
        "tags": [
            "web",
            "hugo"
        ]
    },
    {
        "uri": "/posts/JWT认证机制",
        "title": "JWT认证机制",
        "content": "\n## 什么是JWT\n\nJson web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户",
        "tags": [
            "前后端分离",
            "认证机制"
        ]
    },
    {
        "uri": "/posts/MySQL性能优化",
        "title": "MySQL性能优化",
        "content": "## MySQL性能优化\n\n### 使用索引\n\n\n#### 索引的设计原则\n\n1. 创建索引的列并不一定是`select`操作中要查询的列，最适合做索引的列是出现在`where`子句中经常用作筛选条件或连表子句中作为表连接条件的列。\n2. 具有唯一性的列，索引效果好；重复值较多的列，索引效果差。\n3",
        "tags": [
            "Mysql"
        ]
    },
    {
        "uri": "/posts/Python编程惯例",
        "title": "Python编程惯例",
        "content": "总结了一些在Python开发中的惯用的代码",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/Python语言进阶",
        "title": "Python语言进阶",
        "content": "### 重要知识点\n\n- 生成式（推导式）的用法\n\n  ```Python\n  prices = {\n      'AAPL': 191.88,\n      'GOOG': 1186.96,\n      'IBM': 149.24,\n      'ORCL': 48.44,\n      'ACN':",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/Redis持久化",
        "title": "Redis持久化",
        "content": "持久化功能有效地避免因进程退出造成的数据丢失问题，当下次重启时利用之前持久化的文件即可实现数 据恢复。理解掌握持久化机制对于Redis运维非常重要",
        "tags": [
            "redis"
        ]
    },
    {
        "uri": "/posts/Scrapy入门",
        "title": "Scrapy入门",
        "content": "## Scrapy爬虫框架入门\n\n### Scrapy概述\n\nScrapy是Python开发的一个非常流行的网络爬虫框架，可以用来抓取Web站点并从页面中提取结构化的数据，被广泛的用于数据挖掘、数据监测和自动化测试等领域。下图展示了Scrapy的基本架构，其中包含了主要组件和系统的数据处理流程（图中",
        "tags": [
            "爬虫"
        ]
    },
    {
        "uri": "/posts/vue组件中高德地图展示",
        "title": "Vue组件中高德地图展示",
        "content": "## vue-amap是一套基于Vue 2.0和高德地图的地图组件。\n\n### 安装\n```\nnpm install -S vue-amap\n\n```\n### 在main.js中引入\n\n```\n//引入 vue-amap\nimport VueAMap from 'vue-amap';\nVue.use",
        "tags": [
            "Vue"
        ]
    },
    {
        "uri": "/posts/webshell",
        "title": "Webshell",
        "content": "## Webshell\n\n“web”的含义是显然需要服务器开放web服务，“shell”的含义是取得对服务器某种程度上操作权限。webshell常常被称为通过网站端口对网站服务器的某种程度上操作的权限。\n\n一方面，webshell被站长常常用于网站管理、服务器管理等等，根据FSO权限的不同，作用有在",
        "tags": [
            null
        ]
    },
    {
        "uri": "/posts/websocket",
        "title": "Websocket",
        "content": "**轮询**：在前端通过写js实现。缺点：有延迟、服务器压力大。\n\n```\n 就是客户端通过一定的时间间隔以频繁请求的方式向服务器发送请求，来保持客户端和服务器端的数据同步。问题很明显，当客户端以固定频率向服务器端发送请求时，服务器端的数据可能并没有更新，带来很多无谓请求，浪费带宽，效率低下。\n\n`",
        "tags": [
            null
        ]
    },
    {
        "uri": "/posts/web快速上手",
        "title": "Web快速上手",
        "content": "## 快速上手\n\nWeb开发的早期阶段，开发者需要手动编写每个页面，例如一个新闻门户网站，每天都要修改它的HTML页面，随着网站规模和体量的增大，这种方式就变得极度糟糕。为了解决这个问题，开发人员想到了用外部程序来为Web服务器生成动态内容，也就是说HTML页面以及页面中的动态内容不再通过手动编写而",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/中间件的使用",
        "title": "中间件的使用",
        "content": "## 中间件的应用\n\n### 实现登录验证\n\n我们在用户登录成功后通过session保留了用户信息，接下来我们可以应用做一些调整，要求在为老师投票时必须要先登录，登录过的用户可以进行操作，否则就将用户引导到登录页面，为此我们可以这样修改视图函数。\n\n```Python\ndef praise_or_c",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/为什么选择Python",
        "title": "为什么选择Python",
        "content": "简单、易学 免费、开源 面向对象 丰富的库 可扩展性 ",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/全文检索",
        "title": "全文检索",
        "content": "# Haystack\n\n## 1.什么是Haystack\n\n　　Haystack是django的开源全文搜索框架(全文检索不同于特定字段的模糊查询，使用全文检索的效率更高 )，该框架支持**Solr**,**Elasticsearch**,**Whoosh**,**Xapian 搜索引擎它是一个可插",
        "tags": [
            "Python基础"
        ]
    },
    {
        "uri": "/posts/分支结构",
        "title": "分支结构",
        "content": "## 分支结构\n\n### 应用场景\n\n迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/初识Python",
        "title": "初识Python",
        "content": "Python的历史",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/前后端分离开发",
        "title": "前后端分离开发",
        "content": "## 前后端分离开发入门\n\n在传统的Web应用开发中，大多数的程序员会将浏览器作为前后端的分界线。将浏览器中为用户进行页面展示的部分称之为前端，而将运行在服务器，为前端提供业务逻辑和数据准备的所有代码统称为后端。所谓前后端分离的开发，就是前后端工程师约定好数据交互接口，并行的进行开发和测试，后端只提",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/单例模式",
        "title": "单例模式",
        "content": "确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。",
        "tags": [
            "设计模式"
        ]
    },
    {
        "uri": "/posts/原型模式",
        "title": "原型模式",
        "content": "用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。",
        "tags": [
            "设计模式"
        ]
    },
    {
        "uri": "/posts/团队项目开发的问题和解决方案",
        "title": "团队项目开发的问题和解决方案",
        "content": "## 团队项目开发的问题和解决方案\n\n个人开发和团队开发这两个词相信对大家来说并不陌生。所谓个人开发就是一个人把控产品的所有内容；而团队开发则是由多个人组团并完成产品的开发。要实施团队开发以下几点是不可或缺的：\n\n1. 对开发过程中的各种事件（例如：谁到什么时间完成了什么事情）进行管理和共享。\n2.",
        "tags": [
            "心得",
            "Git"
        ]
    },
    {
        "uri": "/posts/图形用户界面和游戏开发",
        "title": "图形用户界面和游戏开发",
        "content": "\n## 图形用户界面和游戏开发\n\n### 基于tkinter模块的GUI\n\nGUI是图形用户界面的缩写，图形化的用户界面对使用过计算机的人来说应该都不陌生，在此也无需进行赘述。Python默认的GUI开发模块是tkinter（在Python 3以前的版本中名为Tkinter），从这个名字就可以看出它",
        "tags": [
            "GUI"
        ]
    },
    {
        "uri": "/posts/字符串和常用数据结构",
        "title": "字符串和常用数据结构",
        "content": "## 字符串和常用数据结构\n\n### 使用字符串\n\n第二次世界大战促使了现代电子计算机的诞生，最初计算机被应用于导弹弹道的计算，而在计算机诞生后的很多年时间里，计算机处理的信息基本上都是数值型的信息。世界上的第一台电子计算机叫ENIAC（电子数值积分计算机），诞生于美国的宾夕法尼亚大学，每秒钟能够完",
        "tags": [
            "数据结构"
        ]
    },
    {
        "uri": "/posts/存储数据",
        "title": "存储数据",
        "content": "## 存储数据\n\n### 存储海量数据\n\n数据持久化的首选方案应该是关系型数据库，关系型数据库的产品很多，包括：Oracle、MySQL、SQLServer、PostgreSQL等。如果要存储海量的低价值数据，文档数据库也是不错的选择，MongoDB是文档数据库中的佼佼者，之前我们已经讲解过Mong",
        "tags": [
            "爬虫"
        ]
    },
    {
        "uri": "/posts/工厂方法模式",
        "title": "工厂方法模式",
        "content": "定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。",
        "tags": [
            "设计模式"
        ]
    },
    {
        "uri": "/posts/常见反爬策略及应对方案",
        "title": "常见反爬策略及应对方案",
        "content": "## 常见反爬策略及应对方案\n\n1. 构造合理的HTTP请求头。\n   - Accept\n\n   - User-Agent - 三方库fake-useragent\n\n     ```Python\n     from fake_useragent import UserAgent\n     ua = ",
        "tags": [
            "爬虫"
        ]
    },
    {
        "uri": "/posts/并发下载",
        "title": "并发下载",
        "content": "## 并发下载\n\n### 多线程和多进程回顾\n\n#### threading.local类\n\n使用线程时最不愿意遇到的情况就是多个线程竞争资源，在这种情况下为了保证资源状态的正确性，我们可能需要对资源进行加锁保护的处理，这一方面会导致程序失去并发性，另外如果多个线程竞争多个资源时，还有可能因为加锁方",
        "tags": [
            "爬虫"
        ]
    },
    {
        "uri": "/posts/建造者模式",
        "title": "建造者模式",
        "content": "将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。",
        "tags": [
            "设计模式"
        ]
    },
    {
        "uri": "/posts/异步化",
        "title": "异步化",
        "content": "## 异步化\n\n如果没有对`RequestHandler`中的`get`或`post`方法进行异步处理，这就意味着，一旦在`get`或`post`方法中出现了耗时间的操作，不仅仅是当前请求被阻塞，按照Tornado框架的工作模式，其他的请求也会被阻塞，所以我们需要对耗时间的操作进行异步化处理。\n\n在",
        "tags": [
            "Tornado"
        ]
    },
    {
        "uri": "/posts/循环结构",
        "title": "循环结构",
        "content": "## 循环结构\n\n### 应用场景\n\n我们在写程序的时候，一定会遇到需要重复执行某条或某些指令的场景。例如用程序控制机器人踢足球，如果机器人持球而且还没有进入射门范围，那么我们就要一直发出让机器人向球门方向移动的指令。在这个场景中，让机器人向球门方向移动就是一个需要重复的动作，当然这里还会用到上一课",
        "tags": [
            null
        ]
    },
    {
        "uri": "/posts/报表与日志",
        "title": "报表与日志",
        "content": "",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/抽象工厂",
        "title": "抽象工厂",
        "content": "提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。 抽象工厂模式又称为Kit模式，属于对象创建型模式。",
        "tags": [
            "设计模式"
        ]
    },
    {
        "uri": "/posts/推荐算法",
        "title": "推荐算法",
        "content": "#### 什么是推荐算法，意义，使用场景\n\n- 推荐算法是[计算机](https://baike.baidu.com/item/计算机)专业中的一种算法，通过一些数学算法，推测出用户可能喜欢的东西，目前应用推荐算法比较好的地方主要是网络，其中淘宝做的比较好。\n- 帮助用户快速找到想要的商品，提高用户",
        "tags": [
            null
        ]
    },
    {
        "uri": "/posts/数据采集和解析",
        "title": "数据采集和解析",
        "content": "## 数据采集和解析\n\n通过上一个章节的讲解，我们已经了解到了开发一个爬虫需要做的工作以及一些常见的问题，下面我们给出一个爬虫开发相关技术的清单以及这些技术涉及到的标准库和第三方库，稍后我们会一一介绍这些内容。\n\n1. 下载数据 - **urllib** / **requests** / **aio",
        "tags": [
            "爬虫"
        ]
    },
    {
        "uri": "/posts/文件和异常",
        "title": "文件和异常",
        "content": "## 文件和异常\n\n实际开发中常常会遇到对数据进行[持久化](https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96)操作的场景，而实现数据持久化最直接简单的方式就是将数据保存到文件中。说到“文件”这个词，",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/构造程序逻辑",
        "title": "构造程序逻辑-经典例题",
        "content": "## 构造程序逻辑\n\n对于编程语言的初学者来说，在学习了Python的核心语言元素（变量、类型、运算符、表达式、分支结构、循环结构等）之后，必须做的一件事情就是尝试用所学知识去解决现实中的问题，换句话说就是锻炼自己把用人类自然语言描述的算法（解决问题的方法和步骤）翻译成Python代码的能力，而这件",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/正则表达式",
        "title": "正则表达式",
        "content": "## 使用正则表达式\n\n### 正则表达式相关知识\n\n在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要，正则表达式就是用于描述这些规则的工具，换句话说正则表达式是一种工具，它定义了字符串的匹配模式（如何检查一个字符串是否有跟某种模式匹配的部分或者从一个字符串中将与模式匹配的",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/电商网站技术要点剖析",
        "title": "电商网站技术要点剖析",
        "content": "## 电商网站技术要点剖析\n\n### 商业模式\n\n1. B2B - 商家对商家，交易双方都是企业（商家），最典型的案例就是阿里巴巴。\n2. C2C - 个人对个人，例如：淘宝、人人车。\n3. B2C - 商家对个人，例如：唯品会，聚美优品。\n4. C2B - 个人对商家，先有消费者提出需求，后有商家",
        "tags": [
            "项目思路"
        ]
    },
    {
        "uri": "/posts/简单工厂",
        "title": "简单工厂",
        "content": "定义一个类来负责创建其他类的实例,被创建的实例通常都具有共同的父类。",
        "tags": [
            "设计模式"
        ]
    },
    {
        "uri": "/posts/算法入门",
        "title": "算法入门",
        "content": "## 算法入门系列课程1 - 周而复始\n\n### 算法概述\n\n1. 什么是算法？\n\n   解决问题的正确方法和具体的实施步骤。\n\n   例子1：如何在两栋相距50m的大楼的两个房间牵一条线（两个房间都有窗）？\n\n   - 养一只鸟（如鸽子），将线送过去\n   - 用很长的杆子将线递过去\n   - 用",
        "tags": [
            "算法"
        ]
    },
    {
        "uri": "/posts/网络API接口设计",
        "title": "网络API接口设计",
        "content": "## 网络API接口设计\n\n目前许多的Web应用和移动应用都使用了前后端分离的开发模式，前后端分离简单的说就是前端或移动端通过网络API接口和后台进行交互，获得接口中提供的数据并负责用户界面的渲染。API是应用程序的编程接口的缩写，网络API通常指的是基于一个URL（统一资源定位符）可以访问到的资源",
        "tags": [
            "web"
        ]
    },
    {
        "uri": "/posts/网络爬虫",
        "title": "网络爬虫",
        "content": "### 网络爬虫的概念\n\n网络爬虫（web crawler），以前经常称之为网络蜘蛛（spider），是按照一定的规则自动浏览万维网并获取信息的机器人程序（或脚本），曾经被广泛的应用于互联网搜索引擎。使用过互联网和浏览器的人都知道，网页中除了供用户阅读的文字信息之外，还包含一些超链接。网络爬虫系统正",
        "tags": [
            "爬虫"
        ]
    },
    {
        "uri": "/posts/表单的应用",
        "title": "表单的应用",
        "content": "## 表单的应用\n\n实现“用户注册”和“用户登录”的功能，并限制只有登录的用户才能为进行操作。Django框架中提供了对表单的封装，而且提供了多种不同的使用方式。\n\n首先添加用户模型。\n\n```Python\nclass User(models.Model):\n    \"\"\"用户\"\"\"\n    no ",
        "tags": [
            null
        ]
    },
    {
        "uri": "/posts/解析动态内容",
        "title": "解析动态内容",
        "content": "## 解析动态内容\n\n根据权威机构发布的全球互联网可访问性审计报告，全球约有四分之三的网站其内容或部分内容是通过JavaScript动态生成的，这就意味着在浏览器窗口中“查看网页源代码”时无法在HTML代码中找到这些内容，也就是说我们之前用的抓取数据的方式无法正常运转了。解决这样的问题基本上有两种方",
        "tags": [
            "爬虫"
        ]
    },
    {
        "uri": "/posts/语言元素",
        "title": "语言元素",
        "content": "## 语言元素\n\n#### 指令和程序\n\n计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/进程和线程",
        "title": "进程和线程",
        "content": "\n## 进程和线程\n\n今天我们使用的计算机早已进入多CPU或多核时代，而我们使用的操作系统都是支持“多任务”的操作系统，这使得我们可以同时运行多个程序，也可以将一个程序分解为若干个相对独立的子任务，让多个子任务并发的执行，从而缩短程序的执行时间，同时也让用户获得更好的体验。因此在当下不管是用什么编程",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/适配器模式",
        "title": "适配器模式",
        "content": "将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。",
        "tags": [
            "设计模式"
        ]
    },
    {
        "uri": "/posts/递归",
        "title": "递归",
        "content": "# 什么是递归？\n\n    在数学与见算计科学中，是指在函数的定义中使用函数自身的方法。\n    递归算法就是一种直接或者间接的调用自身函数或者方法的算法\n    递归算法的实质是把问题分解规模小的同类问题的子问题\n    然后调用自身方法来解\n\n# 递归的基本原理\n\n    每一级的函数调用都有自",
        "tags": [
            "Python基础"
        ]
    },
    {
        "uri": "/posts/静态资源和Ajax请求",
        "title": "静态资源和Ajax请求",
        "content": "## 静态资源和Ajax请求\n\n基于前面两个章节讲解的知识，我们已经可以使用Django框架来完成Web应用的开发了。接下来我们就尝试实现一个投票应用，具体的需求是用户进入应用首先查看到“学科介绍”页面，该页面显示了一个学校所开设的所有学科；通过点击某个学科，可以进入“老师介绍”页面，该页面展示了该",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/面向对象编程基础",
        "title": "面向对象编程基础",
        "content": "## 面向对象编程基础\n\n活在当下的程序员应该都听过&quot;面向对象编程&quot;一词，也经常有人问能不能用一句话解释下什么是&quot;面向对象编程&quot;，我们先来看看比较正式的说法。\n\n&quot;把一组数据结构和处理它们的方法组成对象（object），把相同行为的对象归纳为类（cl",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/面向对象进阶",
        "title": "面向对象进阶",
        "content": "## 面向对象进阶\n\n了解了面向对象的入门知识，知道了如何定义类，如何创建对象以及如何给对象发消息。为了能够更好的使用面向对象编程思想进行程序开发，我们还需要对Python中的面向对象编程进行更为深入的了解。\n\n### @property装饰器\n\nPython中属性和方法访问权限的问题，虽然我们不建",
        "tags": [
            "Python"
        ]
    },
    {
        "uri": "/posts/项目部署上线指南",
        "title": "项目部署上线指南",
        "content": "## 项目部署上线指南\n\n### 准备上线\n\n1. 上线前的检查工作。\n\n   ```Shell\n   python manage.py check --deploy\n   ```\n\n2. 将DEBUG设置为False并配置ALLOWED_HOSTS。\n\n   ```Python\n   DEBUG ",
        "tags": [
            "项目思路"
        ]
    }
]