[
    {
        "uri": "/posts/GolangGo命令行教程",
        "title": "Golang之命令行教程",
        "content": "Go是由Robert Griesemer，Rob Pike和Ken Thompson在Google设计的一种静态类型的编译型编程语言。Go在语法上类似于C，但是具有内存安全性，垃圾回收，结构化类型和CSP样式的并发性。由于其域名golang.org，该语言通常称为“ Golang”，但专有名称是Go。",
        "tags": [
            "golang",
            "command"
        ]
    },
    {
        "uri": "/posts/Hexo优化之使用GooglePrettify高亮代码",
        "title": "Hexo优化之使用GooglePrettify高亮代码",
        "content": "Hexo自带代码高亮的功能可用性不高，尝试使用prettify对代码进行高亮显示。",
        "tags": [
            "Hexo"
        ]
    },
    {
        "uri": "/posts/Hugo搭建博客",
        "title": "Hugo搭建博客",
        "content": "Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。对比Hexo，Hugo仅需一个二进制文件（hugo.exe）即可实现网站生成的生成。",
        "tags": [
            "web",
            "hugo"
        ]
    },
    {
        "uri": "/posts/JWT认证机制",
        "title": "JWT认证机制",
        "content": "\n## 什么是JWT\n\nJson web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户",
        "tags": [
            "前后端分离",
            "认证机制"
        ]
    },
    {
        "uri": "/posts/单例模式",
        "title": "单例模式",
        "content": "确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。",
        "tags": [
            "设计模式"
        ]
    },
    {
        "uri": "/posts/原型模式",
        "title": "原型模式",
        "content": "用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。",
        "tags": [
            "设计模式"
        ]
    },
    {
        "uri": "/posts/工厂方法模式",
        "title": "工厂方法模式",
        "content": "定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。",
        "tags": [
            "设计模式"
        ]
    },
    {
        "uri": "/posts/建造者模式",
        "title": "建造者模式",
        "content": "将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。",
        "tags": [
            "设计模式"
        ]
    },
    {
        "uri": "/posts/抽象工厂",
        "title": "抽象工厂",
        "content": "提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。 抽象工厂模式又称为Kit模式，属于对象创建型模式。",
        "tags": [
            "设计模式"
        ]
    },
    {
        "uri": "/posts/简单工厂",
        "title": "简单工厂",
        "content": "定义一个类来负责创建其他类的实例,被创建的实例通常都具有共同的父类。",
        "tags": [
            "设计模式"
        ]
    },
    {
        "uri": "/posts/适配器模式",
        "title": "适配器模式",
        "content": "将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。",
        "tags": [
            "设计模式"
        ]
    }
]